plugins {
    id 'application'
}

// utility function
static def path(final String ...s) {
    return String.join(File.separator, s)
}

String readelfVersion = "1.0.0"
String fatJarBaseName = "${appNameLowerCase}-readelf-${readelfVersion}"
String fatJarName = "${fatJarBaseName}.jar"
String fatJarPath = path("${project.layout.buildDirectory.get().toString()}", "libs", "${fatJarName}")
String mainClassName = "${basePackage}.readelf.Main"

dependencies {
    implementation project(':elf')
    implementation project(':utils')
}

application {
    mainClass = mainClassName
}

run {
    args = []
    jvmArgs = []
}

tasks.register('fatJar', Jar) {
    group 'distribution'
    description 'Builds the fat jar of the application'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        archiveBaseName = appNameLowerCase
        attributes(
                // "Implementation-Title": "Gradle",
                "Implementation-Version": "${readelfVersion}",
                "Main-Class": "$mainClassName"
        )
    }
    archiveBaseName = "${fatJarBaseName}"

    doLast {
        printf "The fat jar is %s\n", fatJarPath
        printf "Fat jar size: %.3f MB\n", new File(fatJarPath).length() / 1_000_000L
    }
}

tasks.build.dependsOn(fatJar)
tasks.javadoc.enabled = false

if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {

    // Utility task to check that the output of readelf is the same as GNU's readelf
    tasks.register("checkReadelf") {
        dependsOn fatJar

        doLast {
            final List<String> executables = List.of(
                "/usr/bin/gcc",
                "/usr/bin/g++",
                "/usr/bin/clang",
                "/usr/bin/clang++",
                "/usr/bin/zip",
                "/usr/bin/unzip"
            )

            for(final String filepath : executables) {
                final String elf = filepath.substring(filepath.lastIndexOf("/") + 1)
                if (!(new File(filepath).exists())) {
                    continue
                }

                final String ref = path("${project.layout.buildDirectory.get().toString()}", "${elf}_all_ref.out")
                final String refWide = path("${project.layout.buildDirectory.get().toString()}", "${elf}_all_ref_wide.out")
                final String actual = path("${project.layout.buildDirectory.get().toString()}", "${elf}_all.out")
                final String actualWide = path("${project.layout.buildDirectory.get().toString()}", "${elf}_all_wide.out")

                println("Checking '${filepath}'")
                exec {
                    commandLine "readelf", "-a", "${filepath}"
                    standardOutput = new FileOutputStream(ref)
                }
                exec {
                    commandLine "java", "-jar", "${fatJarPath}", "-a", "${filepath}"
                    standardOutput = new FileOutputStream(actual)
                }
                exec {
                    commandLine "diff", "${actual}", "${ref}"
                }
                exec {
                    commandLine "readelf", "-a", "-W", "${filepath}"
                    standardOutput = new FileOutputStream(refWide)
                }
                exec {
                    commandLine "java", "-jar", "${fatJarPath}", "-a", "-W", "${filepath}"
                    standardOutput = new FileOutputStream(actualWide)
                }
                exec {
                    commandLine "diff", "${actualWide}", "${refWide}"
                }
            }
        }
    }
} else {
    println("Task 'checkReadelf' not created")
}
