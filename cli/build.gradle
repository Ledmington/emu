plugins {
	id 'application'
}

// utility function
static def path(final String ...s) {
	return String.join(File.separator, s)
}

String emuCLIVersion = "0.1.0"
String fatJarBaseName = "${appNameLowerCase}-cli-${emuCLIVersion}"
String fatJarName = "${fatJarBaseName}.jar"
String fatJarPath = path("${project.layout.buildDirectory.get().toString()}", "libs", "${fatJarName}")
String mainClassName = "${basePackage}.emu.Main"

dependencies {
    implementation project(':core')
    implementation project(':elf')
    implementation project(':id')
    implementation project(':mem')
    implementation project(':utils')
}

application {
	mainClass = mainClassName
}

run {
	args = [
			// "/usr/bin/gcc"
	]
	jvmArgs = [
			// "-ea",
			// "-esa",
			// "-XX:+TieredCompilation",
			// "-XX:+PrintCompilation"
	]
}

tasks.register('fatJar', Jar) {
	group = 'distribution'
	description = 'Builds the fat jar of the application'
	from sourceSets.main.output
	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
	manifest {
		archiveBaseName = appNameLowerCase
		attributes(
				"Implementation-Title": "EMU CLI",
				"Implementation-Version": "${emuCLIVersion}",
				"Main-Class": "$mainClassName"
		)
	}
	archiveBaseName = "${fatJarBaseName}"

	doLast {
		printf "The fat jar is %s\n", fatJarPath
		printf "Fat jar size: %.3f MB\n", new File(fatJarPath).length() / 1_000_000L
	}
}

tasks.build.dependsOn(fatJar)
tasks.javadoc.enabled = false
