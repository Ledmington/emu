<?xml version="1.0"?>
<ruleset name="emu-prod-ruleset"
		xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">
    <description>Emu ruleset for production code</description>

    <rule ref="category/java/bestpractices.xml">
        <!-- Avoid reporting custom logger calls -->
        <exclude name="GuardLogStatement" />
    </rule>

    <rule ref="category/java/codestyle.xml">
        <!-- Avoid reporting variables with a short name -->
        <exclude name="ShortVariable" />
        <!-- Avoid reporting methods with a short name -->
        <exclude name="ShortMethodName" />
        <!-- Avoid reporting classes with a short name -->
        <exclude name="ShortClassName" />
        <!-- Avoid reporting methods with early exits -->
        <exclude name="OnlyOneReturn" />
        <!-- Avoid reporting default constructors -->
        <exclude name="UnnecessaryConstructor" />
        <!-- Avoid reporting class names not declared in camel case -->
        <exclude name="ClassNamingConventions" />
        <!-- Avoid reporting field name not declared in camel case -->
        <exclude name="FieldNamingConventions" />
        <!-- Avoid reporting method names not declared in camel case -->
        <exclude name="MethodNamingConventions" />
        <!-- Avoid reporting variables not declared in camel case -->
        <exclude name="LocalVariableNamingConventions" />
        <!-- Avoid reporting method/lambda parameters not declared in camel case -->
        <exclude name="FormalParameterNamingConventions" />
    </rule>

    <!-- Avoid reporting variables with a long name -->
    <rule ref="category/java/codestyle.xml/LongVariable">
        <properties>
            <property name="minimum" value="45" />
        </properties>
    </rule>

    <!-- Avoid reporting if-else with a != condition -->
    <rule ref="category/java/codestyle.xml/ConfusingTernary">
        <properties>
            <property name="ignoreElseIf" value="true" />
        </properties>
    </rule>

    <rule ref="category/java/design.xml">
        <!-- Avoid reporting classes with too many imports -->
	    <exclude name="ExcessiveImports" />
        <!-- Avoid reporting classes with too many methods -->
        <exclude name="GodClass" />
        <!-- Avoid reporting usage of classes from outside the package hierarchy -->
        <exclude name="LoosePackageCoupling" />

        <!-- Rules excluded to be configured later in this file -->
        <exclude name="TooManyFields" />
        <exclude name="TooManyMethods" />
        <exclude name="CyclomaticComplexity" />
        <exclude name="NPathComplexity" />
        <exclude name="NcssCount" />
        <exclude name="ExcessivePublicCount" />
    </rule>

    <!-- Avoid reporting classes with too many fields -->
    <rule ref="category/java/design.xml/TooManyFields">
        <properties>
            <property name="maxfields" value="15" />
        </properties>
    </rule>
    <!-- Avoid reporting classes with too many methods -->
    <rule ref="category/java/design.xml/TooManyMethods">
        <properties>
            <property name="maxmethods" value="30" />
        </properties>
    </rule>
    <!-- Avoid reporting methods that are "too complex" -->
    <rule ref="category/java/design.xml/CyclomaticComplexity">
        <properties>
            <property name="classReportLevel" value="80" />
            <property name="methodReportLevel" value="30" />
            <property name="cycloOptions" value="" />
        </properties>
    </rule>
    <!-- Avoid reporting methods that are "too complex" -->
    <rule ref="category/java/design.xml/NPathComplexity">
        <properties>
            <property name="reportLevel" value="20" />
        </properties>
    </rule>
    <!-- Avoid reporting methods that are "too complex" -->
    <rule ref="category/java/design.xml/CognitiveComplexity">
        <properties>
            <property name="reportLevel" value="70" />
        </properties>
    </rule>
    <!-- Avoid reporting classes with "too many lines" -->
    <rule ref="category/java/design.xml/NcssCount">
        <properties>
            <property name="methodReportLevel" value="60" />
            <property name="classReportLevel" value="1500" />
            <property name="ncssOptions" value="" />
        </properties>
    </rule>
    <!-- Avoid retrieving data from "too far away" -->
    <rule ref="category/java/design.xml/LawOfDemeter">
        <properties>
            <property name="trustRadius" value="3" />
        </properties>
    </rule>
    <!-- Avoid reporting classes with too many public fields and methods -->
    <rule ref="category/java/design.xml/ExcessivePublicCount">
        <properties>
            <property name="minimum" value="45" />
        </properties>
    </rule>

    <rule ref="category/java/documentation.xml">
        <!-- Avoid reporting comments with too many lines -->
        <exclude name="CommentSize" />
        <!-- Avoid reporting missing comments on private fields -->
        <exclude name="CommentRequired" />
        <!-- Avoid reporting constructors with empty body -->
        <exclude name="UncommentedEmptyConstructor" />
    </rule>

    <rule ref="category/java/errorprone.xml">
        <!-- Avoid reporting System.exit() -->
        <exclude name="DoNotTerminateVM" />
    </rule>

    <rule ref="category/java/multithreading.xml">
        <!-- Avoid reporting anything related to java.lang.Thread or Executors -->
        <exclude name="DoNotUseThreads" />
    </rule>
    
    <rule ref="category/java/performance.xml">
        <!-- Avoid reporting redundant field initialization -->
        <exclude name="RedundantFieldInitializer" />
    </rule>

    <rule ref="category/java/security.xml" />
</ruleset>
