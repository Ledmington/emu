plugins {
	id 'java'
	id 'application'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'com.github.ben-manes.versions' version '0.51.0'
}

repositories {
	mavenCentral()
}

static def path(String... args) {
	return String.join(File.separator, args)
}

String version = '0.1.0'
String fatJarBaseName = "emu-v${version}"
String fatJarName = "${fatJarBaseName}.jar"
String fatJarPath = path("${project.layout.buildDirectory.get()}", "libs", "${fatJarName}")
String basePackage = "com.ledmington"
String mainClassName = "${basePackage}.emu.Main"

dependencies {
	implementation project(':elf')
	implementation project(':id')
	implementation project(':common')
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

application {
	mainClass = 'com.ledmington.emu.Main'
	applicationDefaultJvmArgs = [
			"-Xms2G",
			"-Xmx2G",
			// "-XX:+PrintCompilation",
			//"-XX:+PrintInlining",
			//"-XX:+LogCompilation",
			//"-XX:LogFile=jvm_compilation_log"
	]
}

run {
	args = ["/usr/bin/gcc"]
}

spotless {
	format 'misc', {
		target '*.gradle', '*.md', '.gitignore'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
		setEncoding('utf-8')
	}

	java {
		target fileTree('.') {
			include path('**', '*.java')
			exclude path('**', 'build', '**'), path('**', 'build-*', '**'), path('**', 'bin', '**')
		}
		removeUnusedImports()
		formatAnnotations()
		trimTrailingWhitespace()
		endWithNewline()
		setEncoding('utf-8')
		palantirJavaFormat('2.39.0')

		// check https://javadoc.io/doc/com.diffplug.spotless/spotless-plugin-gradle/latest/com/diffplug/gradle/spotless/JavaExtension.html
		importOrder('java', 'javax', 'javafx', 'com', 'org', group as String)
	}
}

tasks.compileJava.dependsOn(spotlessApply)

tasks.register('fatJar', Jar) {
	group 'distribution'
	description 'Builds the fat jar of the application'
	from sourceSets.main.output
	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
	duplicatesStrategy = 'include'
	manifest {
		archiveBaseName = fatJarBaseName
		attributes(
				//"Implementation-Title": "Gradle",
				"Implementation-Version": version,
				"Main-Class": "$mainClassName"
		)
	}
	archiveBaseName = "${fatJarBaseName}"

	doLast {
		println "The fat jar is ${fatJarPath}"
		println String.format("Fat jar size: %.3f MB", (double) new File(fatJarPath).length() / 1_000_000.0)
	}
}
