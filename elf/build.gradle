plugins {
	id 'java-library'
	id 'info.solidsoft.pitest' version '1.15.0'
	id 'me.champeau.jmh' version '0.7.3'
}

dependencies {
	implementation project(':utils')
}

pitest {
	targetClasses.set(['com.ledmington.elf.*'])
	targetTests.set(['com.ledmington.elf.*'])
	pitestVersion = '1.19.0'
	junit5PluginVersion = '1.2.2'
	threads = 4
	outputFormats.set(['XML', 'HTML'])
	useClasspathFile = true     // useful with bigger projects on Windows
	verbose = true
	timestampedReports = false
}

jmh {
	includes = ['com.ledmington.elf.*'] // include pattern (regular expression) for benchmarks to be executed
	//excludes = ['some regular expression'] // exclude pattern (regular expression) for benchmarks to be executed
	iterations = 10 // Number of measurement iterations to do.
	//benchmarkMode = ['thrpt','ss'] // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
	//batchSize = 1 // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
	fork = 2 // How many times to forks a single benchmark. Use 0 to disable forking altogether
	failOnError = true // Should JMH fail immediately if any benchmark had experienced the unrecoverable error?
	forceGC = false // Should JMH force GC between iterations?
	//jvm = 'myjvm' // Custom JVM to use when forking.
	jvmArgs = [/*'--add-modules', 'jdk.incubator.vector'*/]
	//jvmArgsAppend = ['Custom JVM args to use when forking (append these)']
	//jvmArgsPrepend =[ 'Custom JVM args to use when forking (prepend these)']
	//humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
	resultsFile = project.file("${project.layout.buildDirectory.get()}/reports/jmh/results.txt") // results file
	//operationsPerInvocation = 10 // Operations per invocation.
	//benchmarkParameters =  [:] // Benchmark parameters.
	//profilers = [] // Use profilers to collect additional data. Supported profilers: [cl, comp, gc, stack, perf, perfnorm, perfasm, xperf, xperfasm, hs_cl, hs_comp, hs_gc, hs_rt, hs_thr, async]
	//timeOnIteration = '1s' // Time to spend at each measurement iteration.
	resultFormat = 'TEXT' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
	//synchronizeIterations = true // Synchronize iterations?
	threads = 1 // Number of worker threads to run with.
	//threadGroups = [2,3,4] //Override thread group distribution for asymmetric benchmarks.
	//jmhTimeout = '1s' // Timeout for benchmark iteration.
	//timeUnit = 'ms' // Output time unit. Available time units are: [m, s, ms, us, ns].
	verbosity = 'EXTRA' // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]
	//warmup = '1s' // Time to spend at each warmup iteration.
	//warmupBatchSize = 10 // Warmup batch size: number of benchmark method calls per operation.
	//warmupForks = 0 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
	//warmupIterations = 1 // Number of warmup iterations to do.
	//warmupMode = 'INDI' // Warmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].
	//warmupBenchmarks = ['.*Warmup'] // Warmup benchmarks to include in the run in addition to already selected. JMH will not measure these benchmarks, but only use them for the warmup.
	zip64 = true // Use ZIP64 format for bigger archives
	jmhVersion = '1.37' // Specifies JMH version
	//includeTests = true // Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.
	//duplicateClassesStrategy = DuplicatesStrategy.FAIL // Strategy to apply when encountering duplicate classes during creation of the fat jar (i.e. while executing jmhJar task)
}

tasks.register('downloadELF32Manual', Download) {
	group 'utilities'
	description 'Downloads the ELF 32-bit file format specification in the project root directory'
	src "https://refspecs.linuxfoundation.org/elf/elf.pdf"
	dest new File(project.getRootDir(), "elf32-manual.pdf")
	overwrite false
	acceptAnyCertificate true
}

tasks.register('downloadELF64Manual', Download) {
	group 'utilities'
	description 'Downloads the ELF 64-bit file format specification in the project root directory'
	src "https://uclibc.org/docs/elf-64-gen.pdf"
	dest new File(project.getRootDir(), "elf64-manual.pdf")
	overwrite false
	acceptAnyCertificate true
}
